<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>自动构建 on johnpoint&#39;s blog</title>
    <link>https://blog.lvcshu.com/tags/%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA/</link>
    <description>Recent content in 自动构建 on johnpoint&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 01 May 2022 11:51:00 +0800</lastBuildDate>
    <atom:link href="https://blog.lvcshu.com/tags/%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Oneplus 8T 刷入 LineageOS</title>
      <link>https://blog.lvcshu.com/2022/05/01/oneplus-8t-%E5%88%B7%E5%85%A5-lineageos/</link>
      <pubDate>Sun, 01 May 2022 11:51:00 +0800</pubDate>
      <guid>https://blog.lvcshu.com/2022/05/01/oneplus-8t-%E5%88%B7%E5%85%A5-lineageos/</guid>
      <description>&lt;p&gt;劳动节来给博客除除草！&lt;/p&gt;
&lt;p&gt;自从一加手机社区发布了&lt;a href=&#34;https://www.oneplusbbs.com/thread-6275993-1.html&#34;&gt;官方公告&lt;/a&gt;说 Android 12 正式版本出来了之后我就一直在等系统更新的推送，谁知道从4月12日公告出来到今天我都没有收到推送，再加上一加的在 Android 12 后 HOS 会切换成 ColorOS，类原生的特点就没有了，OOS 虽说还会持续维护，但是我既然都用 OOS 了我为啥不自己刷个更加原生的系统呢？比如说 LineageOS。&lt;/p&gt;
&lt;h2 id=&#34;前期准备&#34;&gt;前期准备&lt;/h2&gt;
&lt;p&gt;说干就干，先去官网看下有没有支持，芜湖，&lt;a href=&#34;https://wiki.lineageos.org/devices/kebab/&#34;&gt;有支持&lt;/a&gt;而且看了下文档还蛮完善的，备份好微信(这个手机里面唯一没有同步功能的app)的数据就打算开始刷机了。&lt;/p&gt;
&lt;h2 id=&#34;开刷&#34;&gt;开刷&lt;/h2&gt;
&lt;p&gt;刷机的过程&lt;a href=&#34;https://wiki.lineageos.org/devices/kebab/install&#34;&gt;官方文档&lt;/a&gt;已经非常完善了，在这里不重复赘述。&lt;/p&gt;
&lt;h2 id=&#34;一些要注意的小问题&#34;&gt;一些要注意的小问题&lt;/h2&gt;
&lt;h3 id=&#34;gapps&#34;&gt;GAPPS&lt;/h3&gt;
&lt;p&gt;GAPPS 一定要在首次启动系统之前刷入，不然就要双清，之前辛苦配置的东西都无了&lt;/p&gt;
&lt;h3 id=&#34;safetynet&#34;&gt;SafetyNet&lt;/h3&gt;
&lt;p&gt;在刷好系统之后，我自然是想打开 ingress 玩下，然后折腾了半天，一直在提醒 ”ingress 需要安全登录“，一开始还以为是代理的问题，疯狂切换代理都没有用，后来查到&lt;a href=&#34;https://community.ingress.com/en/discussion/9303/ingress-requires-a-secure-login&#34;&gt;这个讨论&lt;/a&gt;发现是 SafetyNet 的问题，于是 Magisk 刷入了 &lt;a href=&#34;https://github.com/cnrd/MagiskHide-Props-Config&#34;&gt;MagiskHide Props Config&lt;/a&gt;、&lt;a href=&#34;https://github.com/kdrag0n/safetynet-fix&#34;&gt;Universal SafetyNet Fix&lt;/a&gt; 两个模块解决了这个问题&lt;/p&gt;
&lt;p&gt;Universal SafetyNet Fix 这个模块无需任何配置，直接刷入即可生效
MagiskHide Props Config 这个则需要在shell执行指令 &lt;code&gt;props&lt;/code&gt; 按照提示选择即可。
&lt;img loading=&#34;lazy&#34; src=&#34;https://img.r2.6-d.cc/oldcdn/20220501001.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;h3 id=&#34;相机&#34;&gt;相机&lt;/h3&gt;
&lt;p&gt;自带的相机 app 太拉了，直接停用，在 &lt;a href=&#34;https://www.celsoazevedo.com/files/android/google-camera/&#34;&gt;Google Camera Port&lt;/a&gt; 下载了个最新版本的相机，以及挑了个推荐的配置文件。&lt;/p&gt;
&lt;h2 id=&#34;使用感受&#34;&gt;使用感受&lt;/h2&gt;
&lt;p&gt;原生的系统真是舒服啊，没有了一些有的没有的app，动画啥的感觉要比HOS要好。高帧率、AOD、蓝牙HD音频编码、屏下指纹这些都没有啥大问题。&lt;/p&gt;
&lt;p&gt;甚至有些之前在HOS上面没有体验过的特性，比如说锁屏音乐可视化
&lt;img loading=&#34;lazy&#34; src=&#34;https://img.r2.6-d.cc/oldcdn/20220501002.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;总的来说挺满意的，再看看后续使用的过程中有没有啥坑了，就这样。&lt;/p&gt;</description>
    </item>
    <item>
      <title>博客及相关服务部署更新</title>
      <link>https://blog.lvcshu.com/2022/04/17/%E5%8D%9A%E5%AE%A2%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2%E6%9B%B4%E6%96%B0/</link>
      <pubDate>Sun, 17 Apr 2022 00:40:00 +0800</pubDate>
      <guid>https://blog.lvcshu.com/2022/04/17/%E5%8D%9A%E5%AE%A2%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2%E6%9B%B4%E6%96%B0/</guid>
      <description>&lt;h2 id=&#34;部署流程更新&#34;&gt;部署流程更新&lt;/h2&gt;
&lt;p&gt;&lt;del&gt;众所周知&lt;/del&gt;，之前我的博客以及图片托管的服务是通过硬核的DNS分区域解析来实现流量的就近调度，而多个服务器之间的资源文件我一般使用syncthing来进行同步，这个方法显得比较粗糙，但是还挺有效的。最近折腾了下 cloudflare worker 感觉还不错，于是就把博客以及图片托管迁移到了 cloudflare worker 上来，这样一来可以白嫖到不错的全球加速(除中国大陆)，而且使用 workers 进行部署可以省下不少的服务器资源。&lt;/p&gt;
&lt;p&gt;这个就是我之前的发布工作流程&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://img.r2.6-d.cc/oldcdn/20220417004.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;在这次部署流程更新后他变成了这样，博客由于是 public 代码仓库，所以我的自动构建直接使用了 github action，只要基于之前的配置改改加上 publish 到 cloudflare workers 的 step 就可以直接用了。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://img.r2.6-d.cc/oldcdn/20220417002.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;而静态文件托管的我一直是存在自建的 gitea 上面，所以配了个 drone 来执行自动 publish 到 cloudflare workers 的工作，总而言之也是挺香的。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://img.r2.6-d.cc/oldcdn/20220417003.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;h3 id=&#34;5月1日更新&#34;&gt;5月1日更新&lt;/h3&gt;
&lt;p&gt;又更改了下，用上了 vercel 的服务，实测这个服务提供的 cdn 要比 cloudflare 在中国大陆访问的快些。
&lt;img loading=&#34;lazy&#34; src=&#34;https://img.r2.6-d.cc/oldcdn/20220422001.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;h2 id=&#34;博客主题更新&#34;&gt;博客主题更新&lt;/h2&gt;
&lt;p&gt;博客主题也好久没有更新了，这次更新主要是加上了几个能够改进访问体验的 feature。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加了首页巨幕以及文章头图图片下面的背景颜色，能够自定义在图片还没有加载出来之前显示的颜色&lt;/li&gt;
&lt;li&gt;将博客底部版权信息部分的版本号放进了一个js里面，这样就减少了版本号修改时候需要修改的位置&lt;/li&gt;
&lt;li&gt;将原来的文章无头图从几张图片中随机选择一张作为头图改成了随机选择一个颜色作为头图&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;颜色随机取值这里，是取值RGB都在 110-87之间的值，这里的颜色饱和度比较低，看起来比较舒服&lt;/p&gt;</description>
    </item>
    <item>
      <title>博客迁移到cloudflare踩坑</title>
      <link>https://blog.lvcshu.com/2022/03/25/blog-on-cloudflare-workers/</link>
      <pubDate>Fri, 25 Mar 2022 13:11:29 +0800</pubDate>
      <guid>https://blog.lvcshu.com/2022/03/25/blog-on-cloudflare-workers/</guid>
      <description>&lt;p&gt;好久不见，新年开始一直忙着毕业设计和实习找新的工作，一直没有空去将一些折腾过的东西记录成为博客，最近在写毕业设计的间隙终于对博客进行了一波优化，顺便写篇博客记录一下。&lt;/p&gt;
&lt;p&gt;在过去的部署中，博客一直是采用多节点部署并且通过dnspod的分地区解析做流量调度，将流量解析到尽量近的节点来尽量保证博客访问的速度。而多个节点之间的博客文件同步一开始用的是定时任务从github上面更新，后来改成了使用syncthing进行同步，这种方法看起来比较蠢，但是也持续的保证了我的博客在这两年期间的顺畅访问。&lt;/p&gt;
&lt;p&gt;最近在翻sukka大佬的博客过程中，看到了 cloudflare worker 可以联合 kv 存储用来部署静态网站，于是乎我就先将自托管的图片提供服务(就是一个存了图片的http服务)，部署到了 cloudflare 上面，测试速度以及延迟也相当不错，所以就想彻底的把博客这一套东西完全迁移到 cloudflare 上面去。&lt;/p&gt;
&lt;p&gt;这样就能保证我博客在我不主动折腾的情况下保证极高的可靠性以及相对不错的响应速度。&lt;/p&gt;
&lt;h2 id=&#34;404页面异常&#34;&gt;404页面异常&lt;/h2&gt;
&lt;p&gt;在 &lt;code&gt;worker-site/index.js&lt;/code&gt; 文件中，有一段逻辑是控制在url无法获取到文件的时候返回 &lt;code&gt;/404.html&lt;/code&gt;。但是一部署上去我就发现了不对劲，这个404页面直接源代码显示，并没有被浏览器渲染出来。&lt;/p&gt;
&lt;p&gt;经过F12大法查看network的response知道返回的数据中缺少了个指定响应数据格式的header。&lt;/p&gt;
&lt;p&gt;修复这个情况只需要在返回响应的时候加上相应的header即可，代码修改可以参考&lt;a href=&#34;https://github.com/cloudflare/worker-sites-template/pull/63&#34;&gt;我提的PR&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;参考链接&#34;&gt;参考链接&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.skk.moe/post/deploy-blog-to-cf-workers-site/&#34;&gt;将 Hexo 部署到 Cloudflare Workers Site 上的趟坑记录&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
