<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>git on johnpoint&#39;s blog</title>
    <link>https://blog.lvcshu.com/tags/git/</link>
    <description>Recent content in git on johnpoint&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 05 Oct 2022 21:30:37 +0000</lastBuildDate><atom:link href="https://blog.lvcshu.com/tags/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用 ssh 密钥签名 git commit</title>
      <link>https://blog.lvcshu.com/2022/10/05/git-commit-sign-by-ssh-key/</link>
      <pubDate>Wed, 05 Oct 2022 21:30:37 +0000</pubDate>
      
      <guid>https://blog.lvcshu.com/2022/10/05/git-commit-sign-by-ssh-key/</guid>
      <description>在 Github commit添加verified标识 这篇文章中，配置好了 gpg 密钥签名作为标识 git commit 是否值得信任带凭证，但是载后面使用签名的过程中渐渐感到了一丝丝的麻烦，因为 gpg 密钥在我日常的生活中并没有很多其他的用处。最近 github 支持了显示通过 ssh 密钥签名的 commit 的功能。ssh 密钥在日常用起来要比 gpg 密钥要多得多，所以配置了一下，顺便写个文章记录操作流程。
git config --global gpg.format ssh git config --global user.signingKey ~/.ssh/id_ed25519.pub git config --global commit.gpgsign true git config --global tag.gpgsign true 一般来说，配置好了这几个选项，就可以顺利的把签名加上了，要是 git commit 的时候提示你 ssh是不支持的格式 那么就意味着当前版本的 git 并不支持通过 ssh 密钥签名 commit，这时候就要自己更新下系统上面的 git 了。</description>
    </item>
    
    <item>
      <title>git 同步上游代码</title>
      <link>https://blog.lvcshu.com/2020/05/31/git-%E5%90%8C%E6%AD%A5%E4%B8%8A%E6%B8%B8%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Sun, 31 May 2020 21:30:37 +0000</pubDate>
      
      <guid>https://blog.lvcshu.com/2020/05/31/git-%E5%90%8C%E6%AD%A5%E4%B8%8A%E6%B8%B8%E4%BB%A3%E7%A0%81/</guid>
      <description>git remote add upstream 上游地址 git fetch upstream git checkout master git merge upstream/master git merge upstream/master git push origin master  Github:syncing a fork
 </description>
    </item>
    
    <item>
      <title>博客双开，避免offline™</title>
      <link>https://blog.lvcshu.com/2018/08/07/%E5%8D%9A%E5%AE%A2%E5%8F%8C%E5%BC%80%E9%81%BF%E5%85%8Doffline/</link>
      <pubDate>Tue, 07 Aug 2018 05:30:37 +0000</pubDate>
      
      <guid>https://blog.lvcshu.com/2018/08/07/%E5%8D%9A%E5%AE%A2%E5%8F%8C%E5%BC%80%E9%81%BF%E5%85%8Doffline/</guid>
      <description>怎么双开博客呢？ 答案就是—— vps 与 github 一起部署。。。
好吧，我承认我是标题党了一下，主要是记录一下我 成功部署 完 hexo 博客了以后如何将博客部署到 github 上去。
创建远程仓库 就是在 github 上创建一个名称为 用户名.github.io 的仓库，这一个仓库可以在自动化部署之后在 用户名.github.io 生成博客，而用 github 在全世界（除中国大陆，中国大陆就是互联网上的孤岛）外厉害的 cdn ，我们的博客访问速度会比较快， 注意，一开始我是选择不初始化仓库，这样可以避免一些莫名奇妙的坑！
修改 站点配置 在 站点根目录 下的 _config.yml 寻找 deploy 关键词，将其 整部分 修改为：
deploy:type:gitrepo:GitHub上仓库的完整路径包括 .gitbranch:masterrepo 的链接一定要是 ssh 而不是 https 的！！！
配置 git 生成 ssh 密钥
git config --global user.name &amp;#34;你的GitHub用户名&amp;#34; git config --global user.email &amp;#34;你的GitHub注册邮箱&amp;#34; 生成ssh密钥文件：
ssh-keygen -t rsa -C &amp;#34;你的GitHub注册邮箱&amp;#34; 然后直接三个回车即可，默认不需要设置密码 然后找到生成的 .ssh 的文件夹中的 id_rsa.pub 密钥，将内容全部复制</description>
    </item>
    
  </channel>
</rss>
